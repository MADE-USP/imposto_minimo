grupo_receita = 10 - grupo
) -> pnadc_para_juntar_receita
pnadc_receita <- full_join(pnadc_para_juntar_receita, receita_2022,
by = c("grupo_receita" = "Centésimo"), keep=TRUE)
####calibrando informações da pnadc a partir da base da receita
mensaliza_e_individualiza <- function(var){
(var/12)/38417
}
pnadc_receita %>%
group_by(grupo_receita) %>%
mutate(
renda_anual_todasfontes_centesimo = sum(rendimento_todasfontes*peso_dom_comcalib)*12,
fator_expansão = `Renda Total`/renda_anual_todasfontes_centesimo,
rendimento_todasfontes_calibrado = if_else(fator_expansão >= 1, rendimento_todasfontes*fator_expansão,
rendimento_todasfontes),
across(.cols = c(`Renda Total`:`Dívida`),
.fns = mensaliza_e_individualiza)
) %>%
rename(peso_comcalib = peso_dom_comcalib) %>%
select(id_ind, peso_comcalib, UF, urbano_ou_rural, idade, renda_habitual_trabprincipal, #faixa_etaria,
rendimento_todasfontes, renda_bpc, renda_pbf, renda_aposentadoria,
renda_segurodesemprego, renda_outrosprogramas, renda_aluguel,
renda_outrosrendimentos, tem_renda_trabalho, rendimento_todasfontes_calibrado,
anos_estudo, branco, homem, Centésimo, grupo_receita, fator_expansão,
elegível_isencao:posicao_elegível_isencao_dupla_mais_desconto_simplificado,
`Renda Total`:`Dívida`) %>%
ungroup() -> pnadc_receita
pnadc_receita <- pnadc_receita %>% mutate(rendimento_todasfontes_calibrado = coalesce(rendimento_todasfontes_calibrado, rendimento_todasfontes))
pnadc_receita_centesimo <- pnadc_receita %>% filter(!is.na(`Renda Total`))
individuos_na_receita <- append(individuos_na_receita,pnadc_receita_centesimo$id_ind)
pnadc_merge3 <- pnadc_adultos_com_renda_2022 %>% filter(!id_ind %in% individuos_na_receita)
gc()
# 3ª Parte
receita_2022 <- read.csv("Dados - IRPF - Novas Colunas.csv")
#colnames(receita_2022) <- c("Centésimo", "Quantidade de Declarantes","Renda Total","Rendimento Tributável","Base de Cálculo","Total de Despesas Dedutíveis", "Despesas Médicas", "Instrução", "Imóveis","Móveis","Financeiros", "Outros Bens e Direitos")
colnames(receita_2022) <- column_names
receita_2022 <- receita_2022 %>% filter(!is.na(Centésimo))
receita_2022 <- receita_2022 %>% filter(Centésimo <100)
receita_2022$`Lucros e Dividendos` <- as.numeric(receita_2022$`Lucros e Dividendos`)
#receita_2022$`Rendimento Tributável` <- receita_2022$`Rendimento Tributável` %>% replace_na(0)
####código para criar grupos de acordo com tamanho
##ordena pnadc por todos os rendimentos e separa apenas o vetor de pesos
pnadc_merge3 %>%
arrange(desc(rendimento_todasfontes)) -> pnadc_merge3
v <- pnadc_merge3$peso_dom_comcalib
grupo <- 1 # Primeiro grupo
tg <- 384168 # Meta de tamanho p cada grupo
ref <- 1 # Ponto inicial do primeiro grupo: sempre 1
output <- c()
#v <- sort(v) # Variável de entrada tem que estar ordenada
for(i in 1:length(v)){
if(sum(v[ref:i]) <= tg){
} else {
grupo <- grupo + 1
ref <- i + 1}
output[i] <- grupo
}
##junta vetor indicando grupos (percentis em linha com receita)
#será que eu deveria filtrar base da PNADC apenas para quem paga algum imposto? (renda do trabalho acima da linha de isenção)
bind_cols(pnadc_merge3,
output) %>%
rename(grupo = `...341`) %>%
mutate(
populacao_acumulada = cumsum(peso_dom_comcalib),
grupo_receita = 100 - grupo
) -> pnadc_para_juntar_receita
pnadc_receita <- full_join(pnadc_para_juntar_receita, receita_2022,
by = c("grupo_receita" = "Centésimo"), keep=TRUE)
####calibrando informações da pnadc a partir da base da receita
mensaliza_e_individualiza <- function(var){
(var/12)/384168
}
pnadc_receita %>%
group_by(grupo_receita) %>%
mutate(
renda_anual_todasfontes_centesimo = sum(rendimento_todasfontes*peso_dom_comcalib)*12,
fator_expansão = `Renda Total`/renda_anual_todasfontes_centesimo,
rendimento_todasfontes_calibrado = if_else(fator_expansão >= 1, rendimento_todasfontes*fator_expansão,
rendimento_todasfontes),
across(.cols = c(`Renda Total`:`Dívida`),
.fns = mensaliza_e_individualiza)
) %>%
rename(peso_comcalib = peso_dom_comcalib) %>%
select(id_ind, peso_comcalib, UF, urbano_ou_rural, idade, renda_habitual_trabprincipal, #faixa_etaria,
rendimento_todasfontes, renda_bpc, renda_pbf, renda_aposentadoria,
renda_segurodesemprego, renda_outrosprogramas, renda_aluguel,
renda_outrosrendimentos, tem_renda_trabalho, rendimento_todasfontes_calibrado,
anos_estudo, branco, homem, Centésimo, grupo_receita, fator_expansão,
elegível_isencao:posicao_elegível_isencao_dupla_mais_desconto_simplificado,
`Renda Total`:`Dívida`) %>%
ungroup() -> pnadc_receita
pnadc_receita <- pnadc_receita %>% mutate(rendimento_todasfontes_calibrado = coalesce(rendimento_todasfontes_calibrado, rendimento_todasfontes))
pnadc_receita_final <- bind_rows(pnadc_receita_milesimo,pnadc_receita_centesimo, pnadc_receita)
save(pnadc_receita_final, file = "baseRendimentosIsentos.Rda")
sum(pnadc_receita_final$peso_comcalib)
sum(pnadc_adultos_com_renda_2022$peso_comcalib)
pnadc_adultos_com_renda_2022
sum(pnadc_adultos_com_renda_2022$peso_dom_comcalib)
load("base_final_pnad_rf_2022.Rda")
sum(pnadc_receita_final$peso_comcalib)
gc()
rm(list=ls())
library(haven)
library(ggplot2)
library(modi)
library(acid)
library(tidyverse)
library(hutils)
library(dplyr)
library(tidyr)
library(scales)
library(this.path)
setwd(this.dir())
cores_made <- c("#45ff66", "#eb52ff", "#3366ff","#feff41")
load('../data/baseRendimentosIsentos.Rda')
source('utils/IneqFunctions.R')
gc()
rm(list=ls())
library(haven)
library(ggplot2)
library(modi)
library(acid)
library(tidyverse)
library(hutils)
library(dplyr)
library(tidyr)
library(scales)
library(this.path)
setwd(this.dir())
cores_made <- c("#45ff66", "#eb52ff", "#3366ff","#feff41")
load('../data/baseRendimentosIsentos.Rda')
#-----------------------------------------------------------------------
# 1) PARÂMETROS DE FAIXAS E ALÍQUOTAS (REGIME ATUAL)
#-----------------------------------------------------------------------
faixa1 <- 2259.20/1.16
faixa2 <- 2826.65/1.16
faixa3 <- 3751.05/1.16
faixa4 <- 4664.68/1.16
aliquota1 <- 0.075
aliquota2 <- 0.15
aliquota3 <- 0.225
aliquota4 <- 0.275
#-----------------------------------------------------------------------
# 2) FUNÇÃO IR MENSAL (REGIME ATUAL)
#-----------------------------------------------------------------------
calcula_irpf_mensal_antigo <- function(renda) {
if (renda <= faixa1) {
0
} else if (renda <= faixa2) {
(renda - faixa1) * aliquota1
} else if (renda <= faixa3) {
(renda - faixa2) * aliquota2 + (faixa2 - faixa1) * aliquota1
} else if (renda <= faixa4) {
(renda - faixa3) * aliquota3 + (faixa3 - faixa2) * aliquota2 + (faixa2 - faixa1) * aliquota1
} else {
(renda - faixa4) * aliquota4 +
(faixa4 - faixa3) * aliquota3 +
(faixa3 - faixa2) * aliquota2 +
(faixa2 - faixa1) * aliquota1
}
}
tax_table_plr <- data.frame(
lower = c(0, 6677.56/1.0462, 9922.29/1.0462, 13167.01/1.0462, 16380.38/1.0462),
upper = c(6677.55/1.0462, 9922.28/1.0462, 13167/1.0462, 16380.38/1.0462, Inf),
rate = c(0, 0.075, 0.15, 0.225, 0.275)
)
tax_table <- data.frame(
lower = c(0, faixa1, faixa2, faixa3, faixa4),
upper = c(faixa1, faixa2, faixa3, faixa4, Inf),
rate = c(0, 0.075, 0.15, 0.225, 0.275)
)
# Função para calcular o imposto devido com base no valor bruto e na tabela progressiva
calculate_tax <- function(bruto, tax_table) {
tax <- 0
for (i in 1:nrow(tax_table)) {
lower <- tax_table$lower[i]
upper <- tax_table$upper[i]
rate <- tax_table$rate[i]
# Se o valor bruto ultrapassa o limite inferior da faixa,
# calcula o rendimento tributável nessa faixa.
if (bruto > lower) {
taxable_income <- min(bruto, upper) - lower
tax <- tax + taxable_income * rate
}
}
return(tax)
}
# Função para encontrar o valor bruto dado o valor líquido
# Usamos a função uniroot para resolver a equação: bruto - calculate_tax(bruto) = liquido
find_bruto <- function(liquido, tax_table, lower_bound = 0, upper_bound = 1e9) {
f <- function(bruto) {
bruto - calculate_tax(bruto, tax_table) - liquido
}
result <- uniroot(f, lower = lower_bound, upper = upper_bound)
return(result$root)
}
pnadc_receita_final <- pnadc_receita_final %>% mutate(`13º salário` =  replace_na(`13º salário`, 0))
pnadc_receita_final <- pnadc_receita_final %>% mutate(imposto_13 = mapply(find_bruto, `13º salário`, MoreArgs = list(tax_table = tax_table))-`13º salário`)
pnadc_receita_final <- pnadc_receita_final %>% mutate(`Rendimentos Recebidos Acumuladamente` =  replace_na(`Rendimentos Recebidos Acumuladamente`, 0))
pnadc_receita_final <- pnadc_receita_final %>% mutate(imposto_rra = mapply(find_bruto, `Rendimentos Recebidos Acumuladamente`, MoreArgs = list(tax_table = tax_table))-`Rendimentos Recebidos Acumuladamente`)
pnadc_receita_final <- pnadc_receita_final %>% mutate(`Participação nos Lucros ou Resultados` =  replace_na(`Rendimentos Recebidos Acumuladamente`, 0))
pnadc_receita_final <- pnadc_receita_final %>% mutate(`Participação nos Lucros ou Resultados` =  `Participação nos Lucros ou Resultados`*12)
pnadc_receita_final <- pnadc_receita_final %>% mutate(imposto_plr = mapply(find_bruto, `Participação nos Lucros ou Resultados`, MoreArgs = list(tax_table = tax_table_plr))-`Participação nos Lucros ou Resultados`)
pnadc_receita_final <- pnadc_receita_final %>% mutate(imposto_plr = imposto_plr/12)
pnadc_receita_final <- pnadc_receita_final %>% mutate(`Ganhos de Capital na Alienação de Bens/Direitos` =  replace_na(`Ganhos de Capital na Alienação de Bens/Direitos`, 0))
pnadc_receita_final <- pnadc_receita_final %>% mutate(`Ganhos Líquidos em Renda Variável` =  replace_na(`Ganhos Líquidos em Renda Variável`, 0))
pnadc_receita_final <- pnadc_receita_final %>% mutate(`Juros sobre Capital Próprio` =  replace_na(`Juros sobre Capital Próprio`, 0))
pnadc_receita_final <- pnadc_receita_final %>% mutate(`Outros` =  replace_na(`Outros`, 0))
pnadc_receita_final <- pnadc_receita_final %>% mutate(capital = `Rendimentos de Aplicações Financeiras` + `Ganhos Líquidos em Renda Variável`+`Juros sobre Capital Próprio` + Outros)
pnadc_receita_final <- pnadc_receita_final %>% mutate(imposto_capital = (capital/(1-0.15)-capital))
pnadc_receita_final$renda_irpfepnad <- coalesce(pnadc_receita_final$rendimento_todasfontes_calibrado, pnadc_receita_final$rendimento_todasfontes)
pnadc_receita_final <- pnadc_receita_final %>% mutate(renda_base = renda_irpfepnad - `Rendimentos Recebidos Acumuladamente`-`Ganhos de Capital na Alienação de Bens/Direitos`-`Rendimentos de Caderneta de Poupança etc`-`Indenização por Rescisão do Contrato de Trabalho etc`)
pnadc_receita_final <- pnadc_receita_final %>% mutate(imposto_withholding = imposto_capital+imposto_plr)
pnadc_receita_final <- pnadc_receita_final %>% mutate(imposto_withholding = replace_na(imposto_withholding,0))
#-----------------------------------------------------------------------
# 3) FUNÇÃO IR MENSAL (NOVA PROPOSTA ATÉ 7k)
#    - Até 5k isento
#    - 5k a 7k: redução linear
#    - Acima de 7k: sem abatimento adicional
#-----------------------------------------------------------------------
calcula_irpf_mensal_novo <- function(renda) {
# Primeiro, calcula o imposto base conforme a redução até 7.000
if (renda <= 5000) {
base_tax <- 0
} else if (renda <= 7000) {
reducao <- 1095.11 - 0.156445 * renda
base_tax <- max(calcula_irpf_mensal_antigo(renda) - reducao, 0)
} else {
base_tax <- calcula_irpf_mensal_antigo(renda)
}
}
pnadc_receita_final$base_c <- coalesce(pnadc_receita_final$`Base de Cálculo`, 0)
pnadc_receita_final <- pnadc_receita_final %>%
mutate(
# IR mensal no regime antigo
irpf_mensal_antigo = map_dbl(base_c, calcula_irpf_mensal_antigo),
# IR mensal com isenção/redução até 7k
irpf_mensal_novo = map_dbl(base_c, calcula_irpf_mensal_novo)
)
pnadc_receita_final <- pnadc_receita_final %>% mutate(aliquota_pre_ricos = (imposto_withholding+irpf_mensal_novo)/renda_base)
pnadc_receita_final <- pnadc_receita_final %>% mutate(base_tax = imposto_withholding+irpf_mensal_novo)
# Aplica complemento para altas rendas:
imposto_final <- function(base_tax,renda){
if (renda <= 50000) {
return(base_tax)
} else if (renda < 100000) {
desired_tax <- (((renda * 12 / 60000 - 10)))/100 * renda
return(max(base_tax, desired_tax))
} else {  # Caso renda >= 100
desired_tax <- (0.10) * renda
return(max(base_tax, desired_tax))
}
}
pnadc_receita_final <- pnadc_receita_final %>%
mutate(imposto_calculado = pmap_dbl(list(base_tax, renda_base), imposto_final))
#-----------------------------------------------------------------------
# 4) PREPARA O DATAFRAME
#    - Lê a renda mensal (renda_irpfepnad)
#    - Calcula IR mensal do regime antigo e o "reduzido" (até 7k)
#-----------------------------------------------------------------------
pnadc_receita_final$renda_base
gc()
gc()
rm(list=ls())
library(haven)
library(ggplot2)
library(modi)
library(acid)
library(tidyverse)
library(hutils)
library(dplyr)
library(tidyr)
library(scales)
library(this.path)
setwd(this.dir())
cores_made <- c("#45ff66", "#eb52ff", "#3366ff","#feff41")
load('../data/baseRendimentosIsentos.Rda')
#-----------------------------------------------------------------------
# 1) PARÂMETROS DE FAIXAS E ALÍQUOTAS (REGIME ATUAL)
#-----------------------------------------------------------------------
faixa1 <- 2259.20/1.16
faixa2 <- 2826.65/1.16
faixa3 <- 3751.05/1.16
faixa4 <- 4664.68/1.16
aliquota1 <- 0.075
aliquota2 <- 0.15
aliquota3 <- 0.225
aliquota4 <- 0.275
#-----------------------------------------------------------------------
# 2) FUNÇÃO IR MENSAL (REGIME ATUAL)
#-----------------------------------------------------------------------
calcula_irpf_mensal_antigo <- function(renda) {
if (renda <= faixa1) {
0
} else if (renda <= faixa2) {
(renda - faixa1) * aliquota1
} else if (renda <= faixa3) {
(renda - faixa2) * aliquota2 + (faixa2 - faixa1) * aliquota1
} else if (renda <= faixa4) {
(renda - faixa3) * aliquota3 + (faixa3 - faixa2) * aliquota2 + (faixa2 - faixa1) * aliquota1
} else {
(renda - faixa4) * aliquota4 +
(faixa4 - faixa3) * aliquota3 +
(faixa3 - faixa2) * aliquota2 +
(faixa2 - faixa1) * aliquota1
}
}
tax_table_plr <- data.frame(
lower = c(0, 6677.56/1.0462, 9922.29/1.0462, 13167.01/1.0462, 16380.38/1.0462),
upper = c(6677.55/1.0462, 9922.28/1.0462, 13167/1.0462, 16380.38/1.0462, Inf),
rate = c(0, 0.075, 0.15, 0.225, 0.275)
)
tax_table <- data.frame(
lower = c(0, faixa1, faixa2, faixa3, faixa4),
upper = c(faixa1, faixa2, faixa3, faixa4, Inf),
rate = c(0, 0.075, 0.15, 0.225, 0.275)
)
# Função para calcular o imposto devido com base no valor bruto e na tabela progressiva
calculate_tax <- function(bruto, tax_table) {
tax <- 0
for (i in 1:nrow(tax_table)) {
lower <- tax_table$lower[i]
upper <- tax_table$upper[i]
rate <- tax_table$rate[i]
# Se o valor bruto ultrapassa o limite inferior da faixa,
# calcula o rendimento tributável nessa faixa.
if (bruto > lower) {
taxable_income <- min(bruto, upper) - lower
tax <- tax + taxable_income * rate
}
}
return(tax)
}
# Função para encontrar o valor bruto dado o valor líquido
# Usamos a função uniroot para resolver a equação: bruto - calculate_tax(bruto) = liquido
find_bruto <- function(liquido, tax_table, lower_bound = 0, upper_bound = 1e9) {
f <- function(bruto) {
bruto - calculate_tax(bruto, tax_table) - liquido
}
result <- uniroot(f, lower = lower_bound, upper = upper_bound)
return(result$root)
}
pnadc_receita_final <- pnadc_receita_final %>% mutate(`13º salário` =  replace_na(`13º salário`, 0))
pnadc_receita_final <- pnadc_receita_final %>% mutate(imposto_13 = mapply(find_bruto, `13º salário`, MoreArgs = list(tax_table = tax_table))-`13º salário`)
pnadc_receita_final <- pnadc_receita_final %>% mutate(`Rendimentos Recebidos Acumuladamente` =  replace_na(`Rendimentos Recebidos Acumuladamente`, 0))
pnadc_receita_final <- pnadc_receita_final %>% mutate(imposto_rra = mapply(find_bruto, `Rendimentos Recebidos Acumuladamente`, MoreArgs = list(tax_table = tax_table))-`Rendimentos Recebidos Acumuladamente`)
pnadc_receita_final <- pnadc_receita_final %>% mutate(`Participação nos Lucros ou Resultados` =  replace_na(`Rendimentos Recebidos Acumuladamente`, 0))
pnadc_receita_final <- pnadc_receita_final %>% mutate(`Participação nos Lucros ou Resultados` =  `Participação nos Lucros ou Resultados`*12)
pnadc_receita_final <- pnadc_receita_final %>% mutate(imposto_plr = mapply(find_bruto, `Participação nos Lucros ou Resultados`, MoreArgs = list(tax_table = tax_table_plr))-`Participação nos Lucros ou Resultados`)
pnadc_receita_final <- pnadc_receita_final %>% mutate(imposto_plr = imposto_plr/12)
pnadc_receita_final <- pnadc_receita_final %>% mutate(`Ganhos de Capital na Alienação de Bens/Direitos` =  replace_na(`Ganhos de Capital na Alienação de Bens/Direitos`, 0))
pnadc_receita_final <- pnadc_receita_final %>% mutate(`Ganhos Líquidos em Renda Variável` =  replace_na(`Ganhos Líquidos em Renda Variável`, 0))
pnadc_receita_final <- pnadc_receita_final %>% mutate(`Juros sobre Capital Próprio` =  replace_na(`Juros sobre Capital Próprio`, 0))
pnadc_receita_final <- pnadc_receita_final %>% mutate(`Outros` =  replace_na(`Outros`, 0))
pnadc_receita_final <- pnadc_receita_final %>% mutate(capital = `Rendimentos de Aplicações Financeiras` + `Ganhos Líquidos em Renda Variável`+`Juros sobre Capital Próprio` + Outros)
pnadc_receita_final <- pnadc_receita_final %>% mutate(imposto_capital = (capital/(1-0.15)-capital))
pnadc_receita_final$renda_irpfepnad <- coalesce(pnadc_receita_final$rendimento_todasfontes_calibrado, pnadc_receita_final$rendimento_todasfontes)
pnadc_receita_final <- pnadc_receita_final %>% mutate(`Rendimentos de Caderneta de Poupança etc` = replace_na(`Rendimentos de Caderneta de Poupança etc`,0))
pnadc_receita_final <- pnadc_receita_final %>% mutate(`Indenização por Rescisão do Contrato de Trabalho etc` = replace_na(`Indenização por Rescisão do Contrato de Trabalho etc`,0))
pnadc_receita_final <- pnadc_receita_final %>% mutate(renda_base = renda_irpfepnad - `Rendimentos Recebidos Acumuladamente`-`Ganhos de Capital na Alienação de Bens/Direitos`-`Rendimentos de Caderneta de Poupança etc`-`Indenização por Rescisão do Contrato de Trabalho etc`)
pnadc_receita_final <- pnadc_receita_final %>% mutate(imposto_withholding = imposto_capital+imposto_plr)
pnadc_receita_final <- pnadc_receita_final %>% mutate(imposto_withholding = replace_na(imposto_withholding,0))
#-----------------------------------------------------------------------
# 3) FUNÇÃO IR MENSAL (NOVA PROPOSTA ATÉ 7k)
#    - Até 5k isento
#    - 5k a 7k: redução linear
#    - Acima de 7k: sem abatimento adicional
#-----------------------------------------------------------------------
calcula_irpf_mensal_novo <- function(renda) {
# Primeiro, calcula o imposto base conforme a redução até 7.000
if (renda <= 5000) {
base_tax <- 0
} else if (renda <= 7000) {
reducao <- 1095.11 - 0.156445 * renda
base_tax <- max(calcula_irpf_mensal_antigo(renda) - reducao, 0)
} else {
base_tax <- calcula_irpf_mensal_antigo(renda)
}
}
pnadc_receita_final$base_c <- coalesce(pnadc_receita_final$`Base de Cálculo`, 0)
pnadc_receita_final <- pnadc_receita_final %>%
mutate(
# IR mensal no regime antigo
irpf_mensal_antigo = map_dbl(base_c, calcula_irpf_mensal_antigo),
# IR mensal com isenção/redução até 7k
irpf_mensal_novo = map_dbl(base_c, calcula_irpf_mensal_novo)
)
pnadc_receita_final <- pnadc_receita_final %>% mutate(aliquota_pre_ricos = (imposto_withholding+irpf_mensal_novo)/renda_base)
pnadc_receita_final <- pnadc_receita_final %>% mutate(base_tax = imposto_withholding+irpf_mensal_novo)
# Aplica complemento para altas rendas:
imposto_final <- function(base_tax,renda){
if (renda <= 50000) {
return(base_tax)
} else if (renda < 100000) {
desired_tax <- (((renda * 12 / 60000 - 10)))/100 * renda
return(max(base_tax, desired_tax))
} else {  # Caso renda >= 100
desired_tax <- (0.10) * renda
return(max(base_tax, desired_tax))
}
}
pnadc_receita_final <- pnadc_receita_final %>%
mutate(imposto_calculado = pmap_dbl(list(base_tax, renda_base), imposto_final))
#-----------------------------------------------------------------------
# 4) PREPARA O DATAFRAME
#    - Lê a renda mensal (renda_irpfepnad)
#    - Calcula IR mensal do regime antigo e o "reduzido" (até 7k)
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
# 6) CÁLCULO DE INDICADORES EM TERMOS MENSAIS
#    (Se quiser valores em bilhões por mês, multiplique por 1.0462 e divida por 1e9)
#-----------------------------------------------------------------------
irpf_total_atual <- 1.16 * 12* sum(pnadc_receita_final$peso_comcalib * (pnadc_receita_final$irpf_mensal_antigo+pnadc_receita_final$imposto_withholding)) / 1e9
custo_isencao_mensal    <- 1.16 * 12* sum(pnadc_receita_final$peso_comcalib *
(pnadc_receita_final$irpf_mensal_antigo -
pnadc_receita_final$irpf_mensal_novo)) / 1e9
irpf_total_novo <- 1.16 * 12* sum(pnadc_receita_final$peso_comcalib * pnadc_receita_final$imposto_calculado) / 1e9
pnadc_receita_final <- pnadc_receita_final %>% mutate('renda_pos_novo'= renda_base - imposto_calculado)
pnadc_receita_final <- pnadc_receita_final %>% mutate('renda_pos_atual'= renda_base - (imposto_withholding+irpf_mensal_antigo))
## GINI - NOVO ###
source('utils/IneqFunctions.R')
Bottom_Aprop(pnadc_receita_final$renda_pos_novo, pnadc_receita_final$peso_comcalib, 50)
Top_Aprop(pnadc_receita_final$renda_pos_novo, pnadc_receita_final$peso_comcalib, 100)
Top_Aprop(pnadc_receita_final$renda_pos_novo, pnadc_receita_final$peso_comcalib, 91)
StatsGini(pnadc_receita_final$renda_pos_novo, pnadc_receita_final$peso_comcalib)
## GINI - ANTIGO ###
Bottom_Aprop(pnadc_receita_final$renda_pos_atual, pnadc_receita_final$peso_comcalib, 50)
Top_Aprop(pnadc_receita_final$renda_pos_atual, pnadc_receita_final$peso_comcalib, 100)
Top_Aprop(pnadc_receita_final$renda_pos_atual, pnadc_receita_final$peso_comcalib, 91)
StatsGini(pnadc_receita_final$renda_pos_atual, pnadc_receita_final$peso_comcalib)
cat("IRPF total atual (R$ bilhões/ano):", irpf_total_atual_mensal, "\n")
#-----------------------------------------------------------------------
# 7) GRÁFICO DE ALÍQUOTAS EFETIVAS MENSAL
#    - Dividimos em quantis (para < 50k), "Ricos" (50k-100k), "Milionários" (>= 100k)
#    - Alíquota efetiva = [sum(IR * peso) / sum(Renda * peso)] * 100
#-----------------------------------------------------------------------
#pnadc_receita_final <- pnadc_receita_final %>% mutate(aliq_efetiva_antigo =
#sum(irpf_mensal_antigo*peso_comcalib) / sum(renda_irpfepnad*peso_comcalib),
#aliq_efetiva_novo = sum(irpf_mensal_novo*peso_comcalib)/sum(renda_irpfepnad*peso_comcalib)
#)
#df_taxpayers <- pnadc_receita_final %>%
# Se quiser, filtra só quem paga IR em algum regime
#filter(irpf_mensal_antigo > 0 | irpf_mensal_novo > 0)
# Calcula quantis mensais
pnadc_receita_final$quantis <- weighted_ntile(pnadc_receita_final$renda_base,
pnadc_receita_final$peso_comcalib, 100)
# Cria a variável de "divisao_renda" em termos mensais
pnadc_receita_final <- pnadc_receita_final %>%
mutate(
divisao_renda = case_when(
renda_base >= 100000 ~ "Milionários",
renda_base >= 50000  ~ "Ricos",
TRUE ~ as.character(quantis)
)
)
pnadc_receita_agg <- pnadc_receita_final %>% group_by(divisao_renda) %>%
summarise(Regime_Atual = sum((imposto_withholding+irpf_mensal_antigo)*peso_comcalib)/sum(renda_base*peso_comcalib),
Nova_Proposta = sum(imposto_calculado*peso_comcalib)/sum(renda_base*peso_comcalib))
# Converte para formato longo
df_long <- pnadc_receita_agg %>%
pivot_longer(cols = c(Regime_Atual, Nova_Proposta),
names_to = "Regime",
values_to = "Aliquota_Efetiva")
df_long <- df_long %>% distinct()
df_long <- df_long %>% filter(Aliquota_Efetiva>=0)
# Ordena o eixo x
quantis_numeric <- suppressWarnings(as.numeric(df_long$divisao_renda))
ordem_quantis   <- sort(unique(quantis_numeric[!is.na(quantis_numeric)]))
ordem_x         <- c(as.character(ordem_quantis), "Ricos", "Milionários")
df_long$divisao_renda <- factor(df_long$divisao_renda, levels = ordem_x)
df_long <- df_long %>% filter(!divisao_renda %in% as.character(1:75))
# Plot
p <- ggplot(df_long, aes(x = divisao_renda, y = Aliquota_Efetiva,
color = Regime, group = Regime)) +
geom_line(linewidth = 1.25) +
theme_bw() +
scale_color_manual(values = c("Regime_Atual" = "#3366ff", "Nova_Proposta" = "#eb52ff")) +
xlab("Posição na Distribuição de Renda (Mensal)") +
ylab("Alíquota Efetiva (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom")
print(p)
pnadc_receita_agg <- pnadc_receita_final %>% group_by(divisao_renda) %>%
summarise(Regime_Atual = sum((imposto_withholding+irpf_mensal_antigo)*peso_comcalib)/sum(renda_base*peso_comcalib)*100,
Nova_Proposta = sum(imposto_calculado*peso_comcalib)/sum(renda_base*peso_comcalib)*100)
# Converte para formato longo
df_long <- pnadc_receita_agg %>%
pivot_longer(cols = c(Regime_Atual, Nova_Proposta),
names_to = "Regime",
values_to = "Aliquota_Efetiva")
df_long <- df_long %>% distinct()
df_long <- df_long %>% filter(Aliquota_Efetiva>=0)
# Ordena o eixo x
quantis_numeric <- suppressWarnings(as.numeric(df_long$divisao_renda))
ordem_quantis   <- sort(unique(quantis_numeric[!is.na(quantis_numeric)]))
ordem_x         <- c(as.character(ordem_quantis), "Ricos", "Milionários")
df_long$divisao_renda <- factor(df_long$divisao_renda, levels = ordem_x)
df_long <- df_long %>% filter(!divisao_renda %in% as.character(1:75))
# Plot
p <- ggplot(df_long, aes(x = divisao_renda, y = Aliquota_Efetiva,
color = Regime, group = Regime)) +
geom_line(linewidth = 1.25) +
theme_bw() +
scale_color_manual(values = c("Regime_Atual" = "#3366ff", "Nova_Proposta" = "#eb52ff")) +
xlab("Posição na Distribuição de Renda (Mensal)") +
ylab("Alíquota Efetiva (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom")
print(p)
irpf_total_atual
irpf_total_novo
357.4556-349.7947
