install.packages(tidyverse)
install.packages("tidyverse")
install.packages("acid")
install.packages("hutils")
library(this.path)
install.packages("this.path")
library(haven)
library(ggplot2)
library(modi)
install.packages("modi")
library(haven)
library(ggplot2)
library(modi)
library(acid)
library(tidyverse)
library(hutils)
library(dplyr)
library(tidyr)
library(scales)
library(this.path)
library(writexl)
install.packages("writexl")
library(haven)
library(ggplot2)
library(modi)
library(acid)
library(tidyverse)
library(hutils)
library(dplyr)
library(tidyr)
library(scales)
library(this.path)
library(writexl)
library(tidyverse)
library(nycflights13)
dados_resumidos <- flights %>%
group_by(carrier) %>%
summarize(
arr_delay = mean(arr_delay, na.rm = TRUE),
dep_delay = mean(dep_delay, na.rm = TRUE))
plot_arrival <- dados_resumidos %>% arrange(desc(arr_delay)) %>% ggplot(aes(x=carrier, y=arr_delay))
+ geom_bar(stat="identity", width=0.5)
library(tidyverse)
library(nycflights13)
dados_resumidos <- flights %>%
group_by(carrier) %>%
summarize(
arr_delay = mean(arr_delay, na.rm = TRUE),
dep_delay = mean(dep_delay, na.rm = TRUE))
plot_arrival <- dados_resumidos %>%
arrange(desc(arr_delay)) %>%
ggplot(aes(x=carrier, y=arr_delay))+ geom_bar(stat="identity", width=0.5)
plot_departure <- dados_resumidos %>%
arrange(desc(dep_delay)) %>%
ggplot(aes(x=carrier, y=dep_delay)) + geom_bar(stat="identity", width=0.5)
plot_departure
dados_resumidos %>%
arrange(desc(dep_delay))
plot_departure
plot_arrival
plot_departure <- dados_resumidos %>%
arrange(desc(dep_delay)) %>%
mutate(carrier = factor(carrier, carrier))
ggplot(aes(x=carrier, y=dep_delay)) + geom_bar(stat="identity", width=0.5)
dados_resumidos %>%
arrange(desc(dep_delay)) %>%
mutate(carrier = factor(carrier, carrier))
plot_departure <- dados_resumidos %>%
arrange(desc(dep_delay)) %>%
mutate(carrier = factor(carrier, carrier)) %>%
ggplot(aes(x=carrier, y=dep_delay)) + geom_bar(stat="identity", width=0.5)
plot_departure
plot_arrival <- dados_resumidos %>%
arrange(desc(arr_delay)) %>%
mutate(carrier = factor(carrier, carrier)) %>%
ggplot(aes(x=carrier, y=arr_delay))+ geom_bar(stat="identity", width=0.5)
plot_arrival
gc()
rm(list=ls())
# 0 - Imports e Carregamento da Base --------------------------------------
library(haven)
library(ggplot2)
library(modi)
library(acid)
library(tidyverse)
library(hutils)
library(dplyr)
library(tidyr)
library(scales)
library(this.path)
library(writexl)
library(readxl)
library(forcats)
setwd(this.dir())
cores_made <- c("#45ff66", "#eb52ff", "#3366ff", "#feff41")
load('../data/baseRendimentosIsentosPlrAdj.Rda')
# 0 - Ajustando os valores da base pela inflação ------------------------------
inflaciona <- function(var) {
(var * 1.16)
}
pnadc_receita_final <- pnadc_receita_final %>%
mutate(across(.cols = c(rendimento_todasfontes, rendimento_todasfontes_calibrado, `Renda Total`:`Dívida`), .fns = inflaciona))
# 1 - Parâmetros de Faixas, Alíquotas e Despesas Dedutíveis ---------------------
faixa1 <- 2428
faixa2 <- 2826.65
faixa3 <- 3751.05
faixa4 <- 4664.68
aliquota1 <- 0.075
aliquota2 <- 0.15
aliquota3 <- 0.225
aliquota4 <- 0.275
despesas_dedutiveis <- c(
"Previdência Oficial", "Previdência RRA", "Previdência Privada",
"Dependentes", "Instrução", "Despesas Médicas", "Pensão Alimentícia", "Livro-Caixa"
)
# 2 - Função IR Mensal (Regime Atual) -------------------------------------
calcula_irpf_mensal_antigo <- function(renda) {
if (renda <= faixa1) {
0
} else if (renda <= faixa2) {
(renda - faixa1) * aliquota1
} else if (renda <= faixa3) {
(renda - faixa2) * aliquota2 + (faixa2 - faixa1) * aliquota1
} else if (renda <= faixa4) {
(renda - faixa3) * aliquota3 + (faixa3 - faixa2) * aliquota2 + (faixa2 - faixa1) * aliquota1
} else {
(renda - faixa4) * aliquota4 +
(faixa4 - faixa3) * aliquota3 +
(faixa3 - faixa2) * aliquota2 +
(faixa2 - faixa1) * aliquota1
}
}
tax_table_plr <- data.frame(
lower = c(0, 6677.56, 9922.29, 13167.01, 16380.38),
upper = c(6677.55, 9922.28, 13167, 16380.38, Inf),
rate = c(0, 0.075, 0.15, 0.225, 0.275)
)
tax_table <- data.frame(
lower = c(0, faixa1, faixa2, faixa3, faixa4),
upper = c(faixa1, faixa2, faixa3, faixa4, Inf),
rate = c(0, 0.075, 0.15, 0.225, 0.275)
)
calculate_tax <- function(bruto, tax_table) {
tax <- 0
for (i in 1:nrow(tax_table)) {
lower <- tax_table$lower[i]
upper <- tax_table$upper[i]
rate <- tax_table$rate[i]
if (bruto > lower) {
taxable_income <- min(bruto, upper) - lower
tax <- tax + taxable_income * rate
}
}
return(tax)
}
find_bruto <- function(liquido, tax_table, lower_bound = 0, upper_bound = 1e9) {
f <- function(bruto) {
bruto - calculate_tax(bruto, tax_table) - liquido
}
result <- uniroot(f, lower = lower_bound, upper = upper_bound)
return(result$root)
}
# Preenche NAs antes de qualquer cálculo
pnadc_receita_final <- pnadc_receita_final %>%
mutate(across(c(`13º salário`, `Rendimentos Recebidos Acumuladamente`,
`Ganhos de Capital na Alienação de Bens/Direitos`,
`Ganhos Líquidos em Renda Variável`, `Juros sobre Capital Próprio`,
`Outros`, `Rendimentos de Caderneta de Poupança etc`,
`Indenização por Rescisão do Contrato de Trabalho etc`,
`Lucros e Dividendos`), ~replace_na(., 0)))
# Calcula impostos intermediários
pnadc_receita_final <- pnadc_receita_final %>%
mutate(
imposto_13 = mapply(find_bruto, `13º salário`, MoreArgs = list(tax_table = tax_table)) - `13º salário`,
imposto_rra = mapply(find_bruto, `Rendimentos Recebidos Acumuladamente`, MoreArgs = list(tax_table = tax_table)) - `Rendimentos Recebidos Acumuladamente`,
plr_distribuido = plr_distribuido * 12,
imposto_plr = mapply(find_bruto, plr_distribuido, MoreArgs = list(tax_table = tax_table_plr)) - plr_distribuido,
imposto_plr = imposto_plr / 12,
capital = `Rendimentos de Aplicações Financeiras` + `Ganhos Líquidos em Renda Variável` + `Juros sobre Capital Próprio` + Outros,
imposto_capital = (capital / (1 - 0.15) - capital),
renda_irpfepnad = coalesce(rendimento_todasfontes_calibrado, rendimento_todasfontes),
imposto_withholding = replace_na(imposto_capital + imposto_plr, 0)
)
# 3 - Aplica IR Mensal (Nova Proposta) ----------------------------------
pnadc_receita_final <- pnadc_receita_final %>%
mutate(across(all_of(despesas_dedutiveis), ~ replace_na(., 0)),
despesas_dedutiveis_tot = rowSums(across(all_of(despesas_dedutiveis))),
`Rendimento Tributável` = replace_na(`Rendimento Tributável`, 0),
base_c_hip = pmax(pmin((`Rendimento Tributável` - despesas_dedutiveis_tot), 0.8 * `Rendimento Tributável`), 0),
base_c_rb4 = coalesce(`Base de Cálculo`, 0),
base_c_rb8 = coalesce(RB8, 0),
base_c = if_else(base_c_rb8 <= 5000, base_c_rb8, base_c_hip))
calcula_irpf_mensal_novo <- function(renda, rendimento_tributavel) {
if (renda <= 5000) {
0
} else if (renda <= 7000) {
reducao <- 1095.11 - 0.156445 * rendimento_tributavel
max(calcula_irpf_mensal_antigo(renda) - reducao, 0)
} else {
calcula_irpf_mensal_antigo(renda)
}
}
pnadc_receita_final <- pnadc_receita_final %>%
mutate(irpf_mensal_antigo = map_dbl(base_c, calcula_irpf_mensal_antigo),
irpf_mensal_novo = map2_dbl(base_c, `Rendimento Tributável`, calcula_irpf_mensal_novo),
base_tax = imposto_withholding + irpf_mensal_novo)
pnadc_hipotese_A <- pnadc_receita_final %>%
mutate(renda_base = renda_irpfepnad - `Rendimentos Recebidos Acumuladamente` -
`Ganhos de Capital na Alienação de Bens/Direitos` -
`Rendimentos de Caderneta de Poupança etc` -
`Indenização por Rescisão do Contrato de Trabalho etc`)
# Define a função imposto_final no escopo global
imposto_final <- function(base_tax, renda) {
if (is.na(base_tax) || is.na(renda)) {
return(NA_real_)
} else if (renda <= 50000) {
return(base_tax)
} else if (renda < 100000) {
desired_tax <- ((((renda * 12 / 60000 - 10)))/100) * renda
return(max(base_tax, desired_tax))
} else {
desired_tax <- (0.10) * renda
return(max(base_tax, desired_tax))
}
}
# Recalcula imposto final e renda pós-tributação
pnadc_hipotese_A <- pnadc_hipotese_A %>%
mutate(imposto_calculado = pmap_dbl(list(base_tax, renda_base), imposto_final),
renda_pos_novo = renda_base - imposto_calculado,
renda_pos_atual = renda_base - (imposto_withholding + irpf_mensal_antigo))
# Calcula indicadores fiscais para ambas as hipóteses
irpf_total_atual_A <- 12 * sum(pnadc_hipotese_A$peso_comcalib * (pnadc_hipotese_A$irpf_mensal_antigo + pnadc_hipotese_A$imposto_withholding), na.rm = TRUE) / 1e9
custo_isencao_mensal_A <- 12 * sum(pnadc_hipotese_A$peso_comcalib * (pnadc_hipotese_A$irpf_mensal_antigo - pnadc_hipotese_A$irpf_mensal_novo), na.rm = TRUE) / 1e9
irpf_total_novo_A <- 12 * sum(pnadc_hipotese_A$peso_comcalib * pnadc_hipotese_A$imposto_calculado, na.rm = TRUE) / 1e9
# Hipótese B: com redução de 20% sobre lucros e dividendos
pnadc_hipotese_B <- pnadc_receita_final %>%
mutate(renda_base = renda_irpfepnad - 0.2 * `Lucros e Dividendos` -
`Rendimentos Recebidos Acumuladamente` -
`Ganhos de Capital na Alienação de Bens/Direitos` -
`Rendimentos de Caderneta de Poupança etc` -
`Indenização por Rescisão do Contrato de Trabalho etc`)
pnadc_hipotese_B <- pnadc_hipotese_B %>%
mutate(imposto_calculado = pmap_dbl(list(base_tax, renda_base), imposto_final),
renda_pos_novo = renda_base - imposto_calculado,
renda_pos_atual = renda_base - (imposto_withholding + irpf_mensal_antigo))
irpf_total_atual_B <- 12 * sum(pnadc_hipotese_B$peso_comcalib * (pnadc_hipotese_B$irpf_mensal_antigo + pnadc_hipotese_B$imposto_withholding), na.rm = TRUE) / 1e9
custo_isencao_mensal_B <- 12 * sum(pnadc_hipotese_B$peso_comcalib * (pnadc_hipotese_B$irpf_mensal_antigo - pnadc_hipotese_B$irpf_mensal_novo), na.rm = TRUE) / 1e9
irpf_total_novo_B <- 12 * sum(pnadc_hipotese_B$peso_comcalib * pnadc_hipotese_B$imposto_calculado, na.rm = TRUE) / 1e9
resultados_comparativos <- tibble::tibble(
Indicador = c("IRPF Total Atual (bi R$)", "Custo Isenção Mensal (bi R$)", "IRPF Total Novo (bi R$)"),
Hipotese_A = c(irpf_total_atual_A, custo_isencao_mensal_A, irpf_total_novo_A),
Hipotese_B = c(irpf_total_atual_B, custo_isencao_mensal_B, irpf_total_novo_B)
)
# Exporta para Excel
writexl::write_xlsx(resultados_comparativos, "tabela_irpf_comparativo.xlsx")
# 5 - Estatísticas Distributivas ------------------------------------------
## GINI - NOVO ###
source('utils/IneqFunctions.R')
Bottom_Aprop(pnadc_hipotese_A$renda_pos_novo, pnadc_hipotese_A$peso_comcalib, 50)
Top_Aprop(pnadc_hipotese_A$renda_pos_novo, pnadc_hipotese_A$peso_comcalib, 100)
Top_Aprop(pnadc_hipotese_A$renda_pos_novo, pnadc_hipotese_A$peso_comcalib, 91)
StatsGini(pnadc_hipotese_A$renda_pos_novo, pnadc_hipotese_A$peso_comcalib)
## GINI - ANTIGO ###
Bottom_Aprop(pnadc_hipotese_A$renda_pos_atual, pnadc_hipotese_A$peso_comcalib, 50)
Top_Aprop(pnadc_hipotese_A$renda_pos_atual, pnadc_hipotese_A$peso_comcalib, 100)
Top_Aprop(pnadc_hipotese_A$renda_pos_atual, pnadc_hipotese_A$peso_comcalib, 91)
StatsGini(pnadc_hipotese_A$renda_pos_atual, pnadc_hipotese_A$peso_comcalib)
pnadc_receita_final <- pnadc_hipotese_A
pnadc_receita_final$quantis <- weighted_ntile(pnadc_receita_final$renda_base,
pnadc_receita_final$peso_comcalib, 100)
# Cria a variável de "divisao_renda" em termos mensais
pnadc_receita_final <- pnadc_receita_final %>%
mutate(
divisao_renda = case_when(
renda_base >= 100000 ~ "Milionários",
renda_base >= 50000  ~ "Ricos",
TRUE ~ as.character(quantis)
)
)
pnadc_receita_agg <- pnadc_receita_final %>% group_by(divisao_renda) %>%
summarise(Regime_Atual = sum((imposto_withholding+irpf_mensal_antigo)*peso_comcalib)/sum(renda_base*peso_comcalib)*100,
Nova_Proposta = sum(imposto_calculado*peso_comcalib)/sum(renda_base*peso_comcalib)*100)
pnadc_receita_final$imposto_calculado
pnadc_receita_final %>% filter(renda_base <= 5000) %>% View()
pnadc_receita_final %>% filter(renda_base <= 5000) %>% select(c(base_c, renda_base, imposto_calculado) %>% View()
)
pnadc_receita_final %>% filter(renda_base <= 5000) %>% select(c(base_c, renda_base, imposto_calculado)) %>% View()
pnadc_receita_final %>% filter(renda_base <= 5000) %>% select(c(base_tax,base_c, renda_base, imposto_calculado)) %>% View()
pnadc_receita_final %>% filter(renda_base <= 5000) %>% select(c(imposto_withholding, irpf_mensal_novo, base_tax,base_c, renda_base, imposto_calculado)) %>% View()
